#library "BD64ACS"
#include "zcommon.acs"

script "KickKeyPress" (VOID) NET
{
	if(CheckInventory("IsModern") > 0)
	{
	GiveInventory("Kicking",1);
	terminate;
	}
	else
	{
	if(CheckInventory("stamina") == 100)
		{
		terminate;
		}
	else
		{
		if(CheckInventory("Stamina") > 80)
			{
			Print(s:"Not Enough Stamina!");
			PlaySound(0,"Tired",2,1.0,FALSE,ATTN_NORM);
			terminate;
			}
		else
			{
			GiveInventory("Kicking",1);
			}
		}
	}
}

Script "TossingMine" (VOID) NET
{
GiveInventory("TossMine",1);
}

Script "PlacingMine" (VOID) NET
{
GiveInventory("PlaceMine",1);
}

Script "WeaponSpecialAction" (VOID) NET
{
GiveInventory("WeaponSpecialAction",1);
}

#libdefine PLAYER_VIEWHEIGHT 50		//BD64 default player height
script "CheckIfCrouching"(void)
{
	if(GetActorViewHeight(0) <= PLAYER_VIEWHEIGHT / 2 << 16)
		SetResultValue(TRUE);
	else
		SetResultValue(FALSE);
}

Script "DM_SpawnACS" (VOID)
{
if	(GameType() == GAME_NET_DEATHMATCH)
	GiveInventory("IsDM",1);
}

script "SetBloodAmountACS" (void)
{
SetResultValue(GetCVar("zdoombrutalblood"));
}

Script "LowBloodCheckerACS" (VOID)
{
if	(GetCvar("bd_lowgraphicsmode") == 1) {GiveInventory("LowGraphicsMode",1);}
if	(GetCvar("zdoombrutaljanitor") == 1) {GiveInventory("LowGraphicsMode",1);}
if	(GameType() == GAME_NET_DEATHMATCH) {GiveInventory("LowGraphicsMode",1);}
terminate;
}

script "Zandro_Check" OPEN
{
if (GetCvar("isrunningzandronum") == 1)
	{
	ConsoleCommand("compat_clientssendfullbuttoninfo 1");
	}
}

script "Sprinting" ENTER
{
if(CheckInventory("IsTacticalClass") == 1)
	{
	int buttons;

	while (TRUE)
		{
		buttons = GetPlayerInput(-1, INPUT_BUTTONS);

		if ((buttons & BT_SPEED) && (buttons & BT_FORWARD) && !(buttons & BT_CROUCH))
			{
			GiveInventory("IsRunning",1);
			delay(1);
			}
		delay(1);
		TakeInventory("IsRunning",1);
		}
	}
	else
	terminate;
}

script "TacticalPlayerFasterACS" (void)
{
SetActorProperty(0,APROP_Speed,2.0);
delay (1);
}

script "TacticalPlayerSlowerACS" (void)
{
SetActorProperty(0,APROP_Speed,1.0);
delay (1);
}

script "VanillaMapChecker" ENTER	//gives dummy item to exit to vanilla map08
{
if	(GetCvar("VMapCheckCvar") == 0) {TakeInventory("VMapCheck",1);}
if	(GetCvar("VMapCheckCvar") == 1) {GiveInventory("VMapCheck",1);}
}

script "AbsolutionMapChecker" ENTER	//gives dummy item to access vanilla map28
{
if	(GetCvar("AbsMapCheckCvar") == 0) {TakeInventory("AbsMapCheck",1);}
if	(GetCvar("AbsMapCheckCvar") == 1) {GiveInventory("AbsMapCheck",1);}
}

script "TCMapChecker" ENTER			//gives dummy item on map07 to exit to abolsolution tc maps
{
if	(GetCvar("TCMapCheckCvar") == 0) {TakeInventory("TCMapCheck",1);}
if	(GetCvar("TCMapCheckCvar") == 1) {GiveInventory("TCMapCheck",1);}
}

script "VanillaWeapons" (void)		//vanilla weapon animations
{
SetResultValue(GetCVar("VWeaponCvar"));
}

script "GaussCannonRandom" (void)
{
SetResultValue(GetCVar("GaussCannon_Spawner_Cvar"));
}

script "BFGRandom" (void)
{
SetResultValue(GetCVar("BFG_Spawner_Cvar"));
}

script "WpnPowerRandom" (void)
{
SetResultValue(GetCVar("WpnPower_Spawner_Cvar"));
}

script "NImpRandom" (void)
{
SetResultValue(GetCVar("NImp_Spawner_Cvar"));
}

script "NSpectreRandom" (void)
{
SetResultValue(GetCVar("NSpectre_Spawner_Cvar"));
}

script "NCacoRandom" (void)
{
SetResultValue(GetCVar("NCaco_Spawner_Cvar"));
}

script "HellHoundRandom" (void)
{
SetResultValue(GetCVar("Hellhound_Spawner_Cvar"));
}

script "AnnihilatorRandom" (void)
{
SetResultValue(GetCVar("Annihilator_Spawner_Cvar"));
}

script "MotherDemonRandom" (void)
{
SetResultValue(GetCVar("Motherdemon_Spawner_Cvar"));
}

script "HoundChooserACS" (void)
{
SetResultValue(GetCVar("HoundChooserCvar"));
}

script "RevenantChooserACS" (void)
{
SetResultValue(GetCVar("RevenantChooserCvar"));
}

script "D64MonstersOnlyReplacer" (void)
{
SetResultValue(GetCVar("D64MonstersOnlyCvar"));
}

script "D64WeaponsOnlyReplacer" (void)
{
SetResultValue(GetCVar("D64WeaponsOnlyCvar"));
}

script "Light_Fog_Remover" (void)
{
SetResultValue(GetCVar("LFog_Cvar"));
}

script "Flat_Decal_Remover" (void)
{
SetResultValue(GetCVar("FloorDecal_Cvar"));
}

script "SoulHandler" ENTER			//unmaker ammo set ThingID
{
Thing_ChangeTID(0,2337+PlayerNumber());
}

Script "TUnmakerChecker" (void)		//checks if you have tactical unmaker to allow spawn of tactical unmaker ammo
{
	for(int i = 2337; i < 2400; i++)
	{
		if(CheckActorInventory(i,"UnmakerTACTICAL") && CheckActorInventory(i,"WpnPower1Icon") && CheckActorInventory(i,"WpnPower2Icon") && CheckActorInventory(i,"WpnPower3Icon"))		//r31 checks if you have tactical unmaker & demon keys
		{
			SetResultValue(3);
			break;
		}
		if(CheckActorInventory(i,"UnmakerTACTICAL"))
		{
			SetResultValue(2);
			break;
		}
	}
}

Script "AlternativeRifleSkin" (void)
{
SetResultValue(getCvar("AlternativeRifleSkinCvar"));
}

Script "AlternativeLaserSkin" (void)
{
SetResultValue(getCvar("AlternativeLaserSkinCvar"));
}

script "SSGZombieRandomACS" (void)
{
SetResultValue(GetCVar("SSGZombieRandom_Cvar"));
}

script "SSGinDoom1" (void)
{
SetResultValue(GetCVar("SSGinDoom1_Cvar"));
	if	(GetCvar("SSGinDoom1_Cvar") == 3)
	{
		str maplump = StrParam(n:PRINTNAME_LEVEL);
		
		if (StrCmp(StrLeft(maplump, 2), "E1") == 0 | StrCmp(StrLeft(maplump, 2), "E2") == 0 | StrCmp(StrLeft(maplump, 2), "E3") == 0 | StrCmp(StrLeft(maplump, 2), "E4") == 0)
		{
			SetActorState(0,"SSG_Shotgun_Replacer");
		}
		else if (StrCmp(StrLeft(maplump, 5), "LEVEL") == 0 | StrCmp(StrLeft(maplump, 3), "NV_") == 0 )
		{
			SetActorState(0,"ShotgunSpawner");
		}
		else
		{
			SetActorState(0,"ShotgunSpawner");
		}
	}
}

script "ZMarineRandomACS" (void)
{
SetResultValue(GetCVar("ZMarineRandom_Cvar"));
}

script "ZombieBFGRandomACS" (void)
{
SetResultValue(GetCVar("ZombieBFGRandom_Cvar"));
}

script "AcidDemonRandomACS" (void)
{
SetResultValue(GetCVar("AcidDemonRandom_Cvar"));
}

script "ChaingunRandomACS" (void)
{
SetResultValue(GetCVar("Chaingun_Spawner_Cvar"));
}

Script "ClassicRLACS" (void)
{
SetResultValue(getCvar("ClassicRLCvar"));
}

Script "AlternativeAmmoPickupSpritesACS" (void)
{
SetResultValue(getCvar("AlternativeAmmoPickupSpritesCvar"));
}

Script "BerserkSwitchFistsACS" (void)
{
SetResultValue(getCvar("BerserkSwitchFistsCvar"));
}

script "StalkerRandomACS" (void)
{
SetResultValue(GetCVar("StalkerRandom_Cvar"));
}

script "NightCrawlerRandomACS" (void)
{
SetResultValue(GetCVar("NightCrawlerRandom_Cvar"));
}

script "FootStepCheck" (void)	//footstep sound check for player decorate
{
SetResultValue(GetCVar("FootStepCheckCvar"));
}

script "CensoredHealing_ACS" (void)
{
SetResultValue(GetCVar("CensoredHealing_Cvar"));
}

script "BruiserRandom_ACS" (void)
{
SetResultValue(GetCVar("BruiserRandom_Cvar"));
}

script "PainStalkerRandomACS" (void)
{
SetResultValue(GetCVar("PainStalkerRandom_Cvar"));
}

Script "VanillaHUDSwitching" ENTER	//option to set vanilla normal HUD
{
if(GetUserCvar(0,"VanillaStatusBarCvar") == 1) {GiveInventory("VanillaSBar",1);}
if(GetUserCvar(0,"VanillaStatusBarCvar") == 0) {TakeInventory("VanillaSBar",1);}
Delay(35);
Restart;
}

Script "ArragendHUDSwitching" ENTER	//option to set vanilla full HUD
{
if(GetUserCvar(0,"ArragendHUDCvar") == 1) {GiveInventory("ArrangedHud",1);}
if(GetUserCvar(0,"ArragendHUDCvar") == 0) {TakeInventory("ArrangedHud",1);}
Delay(35);
Restart;
}

/*
Script "VanillaChainsawACS" ENTER 	//option to set vanilla chainsaw
{
if (CheckInventory("64ChainsawTACTICAL") == 1 && GetCvar("VanillaChainsawCvar") == 1)
	{
	SetAmmoCapacity("SawGas",700);
	GiveInventory("64ChainsawTACTICAL_Classic",1);
	TakeInventory("64ChainsawTACTICAL",1);
	TakeInventory("SawGas",100);
	SetAmmoCapacity("SawGas",600);
	}
if (CheckInventory("64ChainsawTACTICAL_Classic") == 1 && GetCvar("VanillaChainsawCvar") == 0)
	{
	SetAmmoCapacity("SawGas",700);
	GiveInventory("64ChainsawTACTICAL",1);
	TakeInventory("64ChainsawTACTICAL_Classic",1);
	TakeInventory("SawGas",100);
	SetAmmoCapacity("SawGas",600);
	}
if (CheckInventory("64ChainsawMODERN") == 1 && GetCvar("VanillaChainsawCvar") == 1)
	{
	GiveInventory("64ChainsawMODERN_Classic",1);
	TakeInventory("64ChainsawMODERN",1);
	}
if (CheckInventory("64ChainsawMODERN_Classic") == 1 && GetCvar("VanillaChainsawCvar") == 0)
	{
	GiveInventory("64ChainsawMODERN",1);
	TakeInventory("64ChainsawMODERN_Classic",1);
	}
Delay(40);
Restart;
}
*/

script "ClassicCSAWCheck" (void)	//cvar check for chainsaw pickup
{
SetResultValue(GetCVar("VanillaChainsawCvar"));
}

script "KnightmareRandom" (void)
{
SetResultValue(GetCVar("KnightmareRandomCvar"));
}

script "WeaponsWarmUpACS" (void)
{
SetResultValue(GetCVar("WeaponsWarmUpCvar"));
}

script "AlphaPickupACS" (void)
{
SetResultValue(GetCVar("AlphaPickupCvar"));
}

Script "SevereredLimbDeathACS" (void)
{
SetResultValue(GetCVar("SevereredLimbDeathCvar"));
}

Script "ReplaceZMarineNaziACS" (void)
{
SetResultValue(GetCVar("ZombieMarineNaziCvar"));
}

Script "NightElementalRandom_ACS" (void)
{
SetResultValue(GetCVar("NightElementalRandomCvar"));
}

Script "FleshWizardRandomACS" (void)
{
SetResultValue(GetCVar("FleshWizardRandomCvar"));
}

script "HordeMultiplier" (void)		//husk zombie multiplier option
{
SetResultValue(GetCVar("TheHorde_Multiplier_Cvar"));
}

script "BonusRandomACS" (void)
{
SetResultValue(GetCVar("BonusRandomCvar"));
}

script "ThingRandomACS" (void)
{
SetResultValue(GetCVar("ThingRandomCvar"));
}

script "AltRadSuitACS" (void)
{
SetResultValue(GetCVar("AltRadSuitCvar"));
}

script "NoReloadACS" ENTER
{
if(GetCvar("NoReloadCvar") == 1) {GiveInventory("NoReloading",1);}
if(GetCvar("NoReloadCvar") == 0) {TakeInventory("NoReloading",1);}
}

script "ClassicChaingun" (void)
{
SetResultValue(GetCVar("ClassicChaingunCvar"));
}

script "FlashlightCheck" (void)
{
SetResultValue(GetCVar("FlashlightStartCvar"));
}

script "KeenRandom" (void)
{
SetResultValue(GetCVar("Keen_Spawner_Cvar"));
}

script "PoltergeistEnablerACS" (void)
{
SetResultValue(GetCVar("PoltergeistCvar"));
}

script "ClassicTorchACS" (void)
{
SetResultValue(GetCVar("ClassicTorchCvar"));
}

script "LiquidSplashCvarACS" (void)
{
SetResultValue(GetCVar("LiquidSplashCvar"));
}

script "HordeLeaderRandom" (void)
{
SetResultValue(GetCVar("HordeLeader_Spawner_Cvar"));
}

script "ShootableProjectiles" (void)
{
SetResultValue(GetCVar("ShootableProjectilesCVAR"));
}